{"version":3,"file":"main.js","mappings":"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","sources":["webpack://yandex_praktikum/./src/scripts/card.js","webpack://yandex_praktikum/./src/scripts/modal.js","webpack://yandex_praktikum/./src/scripts/validation.js","webpack://yandex_praktikum/./src/scripts/index.js","webpack://yandex_praktikum/./src/scripts/api.js"],"sourcesContent":["// функция создания карточки\nfunction createCard(\n  cardData,\n  userID,\n  handleDeleteButtonClick,\n  handleLikeButton,\n  openImage\n) {\n  const cardTemplate = document.querySelector(\"#card-template\").content;\n  const cardElement = cardTemplate\n    .querySelector(\".places__item\")\n    .cloneNode(true);\n  const cardImage = cardElement.querySelector(\".card__image\");\n  const cardTitle = cardElement.querySelector(\".card__title\");\n  const cardLikes = cardElement.querySelector(\".likes-quantuty\");\n\n  cardImage.src = cardData.link;\n  cardImage.alt = cardData.name;\n  cardTitle.textContent = cardData.name;\n  cardLikes.textContent = cardData.likes.length;\n  const cardID = cardData._id;\n\n  const deleteButton = cardElement.querySelector(\".card__delete-button\");\n  deleteButton.addEventListener(\"click\", () => {\n    handleDeleteButtonClick(cardID, cardElement);\n  });\n\n  if (cardData.owner._id !== userID) {\n    deleteButton.remove();\n  }\n\n  const likeButton = cardElement.querySelector(\".card__like-button\");\n  likeButton.addEventListener(\"click\", () => {\n    handleLikeButton(cardID, likeButton, cardLikes);\n  });\n\n  cardImage.addEventListener(\"click\", openImage);\n\n  return cardElement;\n}\n\nexport { createCard };\n","// функция обработки клика по кнопке закрытия, сохранения и по оверлею\nfunction handlePopupClick(evt) {\n  if (\n    evt.target.classList.contains(\"popup__close\") ||\n    evt.target.classList.contains(\"popup\") ||\n    evt.target.classList.contains(\"popup__button\")\n  ) {\n    const activePopup = document.querySelector(\".popup_is-opened\");\n    if (activePopup) {\n      closeModal(activePopup);\n    }\n  }\n}\n\n// // функция обработки нажатия клавиши ESC\nfunction closePopupEsc(evt) {\n  if (evt.key === \"Escape\") {\n    const activePopup = document.querySelector(\".popup_is-opened\");\n    if (activePopup) {\n      closeModal(activePopup);\n    }\n  }\n}\n\n// функция открытия поп-апа\nfunction openModal(item) {\n  item.classList.add(\"popup_is-opened\");\n  document.addEventListener(\"keydown\", closePopupEsc);\n  item.addEventListener(\"click\", handlePopupClick);\n}\n\n// функция закрытия поп-апа\nfunction closeModal(item) {\n  item.classList.remove(\"popup_is-opened\");\n  document.removeEventListener(\"keydown\", closePopupEsc);\n  item.removeEventListener(\"click\", handlePopupClick);\n}\n\nexport { openModal, closeModal };","// функция показывает ошибку\nconst showInputError = (formElement, inputElement, errorMessage, validationConfig) => {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.add(validationConfig.inputErrorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(validationConfig.errorClass);\n};\n\n// функция скрывает ошибку\nconst hideInputError = (formElement, inputElement, validationConfig) => {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.remove(validationConfig.inputErrorClass);\n  errorElement.classList.remove(validationConfig.errorClass);\n  errorElement.textContent = \"\";\n};\n\n//функция проверяет валидность полей ввода\nconst checkInputValidity = (formElement, inputElement, validationConfig) => {\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    inputElement.setCustomValidity(\"\");\n  }\n\n  if (!inputElement.validity.valid) {\n    showInputError(formElement, inputElement, inputElement.validationMessage, validationConfig);\n  } else {\n    hideInputError(formElement, inputElement, validationConfig);\n  }\n};\n\n// функция устанавливает слушатели событий на ввод текста в поля формы\nconst setEventListeners = (formElement, validationConfig) => {\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\n  inputList.forEach((inputElement) => {\n    inputElement.addEventListener(\"input\", function () {\n      checkInputValidity(formElement, inputElement, validationConfig);\n      toggleButtonState(inputList, buttonElement, validationConfig);\n    });\n  });\n};\n\n// функция устанавливает слушатели событий на отправку формы\nconst enableValidation = (validationConfig) => {\n  const formList = Array.from(document.querySelectorAll(validationConfig.formSelector));\n  formList.forEach((formElement) => {\n    formElement.addEventListener(\"submit\", function (evt) {\n      evt.preventDefault();\n    });\n    setEventListeners(formElement, validationConfig);\n  });\n};\n\n// функция проверяет, есть ли невалидные поля\nconst hasInvalidInput = (inputList) => {\n  return inputList.some((inputElement) => {\n    return !inputElement.validity.valid;\n  });\n};\n\n// функция делает кнопку неактивной, если есть невалидные поля\nconst toggleButtonState = (inputList, buttonElement, validationConfig) => {\n  if (hasInvalidInput(inputList)) {\n    buttonElement.disabled = true;\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\n  } else {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\n  }\n};\n\n// функция очищает ошибки валидации и делает кнопку неактивной\nconst clearValidation = (profileForm, validationConfig) => {\n  const inputList = Array.from(profileForm.querySelectorAll(validationConfig.inputSelector));\n  const buttonElement = profileForm.querySelector(validationConfig.submitButtonSelector);\n  inputList.forEach((inputElement) => {\n    hideInputError(profileForm, inputElement, validationConfig);\n    inputElement.value = \"\";\n  });\n  toggleButtonState(inputList, buttonElement, validationConfig); \n}\n\nexport { enableValidation, clearValidation };","import \"../pages/index.css\";\nimport { createCard } from \"./card\";\nimport { openModal, closeModal } from \"./modal\";\nimport { enableValidation, clearValidation } from \"./validation\";\nimport {\n  getProfileData,\n  getCardsFromServer,\n  patchProfile,\n  postNewCard,\n  deleteCard,\n  addNewLike,\n  removeLike,\n  changeAvatar,\n} from \"./api\";\n\n// данные пользователя\nconst profileImage = document.querySelector(\".profile__image\");\n\n// нахождение контейнера для карточек\nconst placesList = document.querySelector(\".places__list\");\n\n// нахождение поп-апов\nconst popUps = document.querySelectorAll(\".popup\");\nconst editPopUP = document.querySelector(\".popup_type_edit\");\nconst newCardPopUP = document.querySelector(\".popup_type_new-card\");\nconst imagePopUP = document.querySelector(\".popup_type_image\");\nconst editAvatarPopup = document.querySelector(\".popup_type_new-avatar\");\n\n// нахождение кнопок редактирования и добавления новой карточки\nconst editButton = document.querySelector(\".profile__edit-button\");\nconst addButton = document.querySelector(\".profile__add-button\");\nconst editAvatarButton = document.querySelector(\".avatar_button\");\n\n// элементы для реализации редактирования профиля\nconst editProfileForm = editPopUP.querySelector(\".popup__form\");\nconst nameInput = editProfileForm.querySelector(\".popup__input_type_name\");\nconst jobInput = editProfileForm.querySelector(\n  \".popup__input_type_description\"\n);\nconst profileTitle = document.querySelector(\".profile__title\");\nconst profileDescription = document.querySelector(\".profile__description\");\n\n// элементы для реализации добавления новой карточки\nconst newCardForm = newCardPopUP.querySelector(\".popup__form\");\nconst newCardTitle = newCardForm.querySelector(\".popup__input_type_card-name\");\nconst newCardUrl = newCardForm.querySelector(\".popup__input_type_url\");\n\n// элементы для реализации открытия картинки\nconst popUpImage = imagePopUP.querySelector(\".popup__image\");\nconst popUpTitle = imagePopUP.querySelector(\".popup__caption\");\n\n// элементы для редактирования аватара\nconst editAvatarForm = editAvatarPopup.querySelector(\".popup__form\");\nconst editAvatarUrl = editAvatarForm.querySelector(\".popup__input_type_url\");\n\nlet profileID;\n\n// объект свойств\nconst validationConfig = {\n  formSelector: \".popup__form\",\n  inputSelector: \".popup__input\",\n  submitButtonSelector: \".popup__button\",\n  inactiveButtonClass: \"popup__button_disabled\",\n  inputErrorClass: \"popup__input_type_error\",\n  errorClass: \"popup__error_visible\",\n};\n\n// получение данных профиля\ngetProfileData()\n  .then((result) => {\n    profileImage.style.backgroundImage = `url('${result.avatar}')`;\n    profileTitle.textContent = result.name;\n    profileDescription.textContent = result.about;\n    profileID = result._id;\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n\n// функция редактирования данных профиля\nfunction handleProfileFormSubmit(evt) {\n  evt.preventDefault();\n\n  const submitButton = evt.target.querySelector(\"button\");\n  const originalButtonText = submitButton.textContent;\n  submitButton.textContent = \"Сохранение...\";\n\n  profileTitle.textContent = nameInput.value;\n  profileDescription.textContent = jobInput.value;\n\n  patchProfile(\n    profileTitle.textContent,\n    profileDescription.textContent\n  ).finally(() => {\n    submitButton.textContent = originalButtonText;\n    evt.target.addEventListener(\"click\", handleProfileFormSubmit);\n  });\n}\n\n// функция редактирования аватара\nfunction handleAvatarFormSubmit(evt) {\n  evt.preventDefault();\n  const newAvatar = editAvatarUrl.value;\n\n  const submitButton = evt.target.querySelector(\"button\");\n  const originalButtonText = submitButton.textContent;\n  submitButton.textContent = \"Сохранение...\";\n\n  changeAvatar(newAvatar)\n    .then((result) => {\n      profileImage.style.backgroundImage = url(\"${result.avatar}\");\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n    .finally(() => {\n      submitButton.textContent = originalButtonText;\n    });\n}\n\n// функция добавления новой карточки\nfunction handleNewCardSubmit(evt) {\n  evt.preventDefault();\n\n  const newTitle = newCardTitle.value;\n  const newUrl = newCardUrl.value;\n\n  const submitButton = evt.target.querySelector(\"button\");\n  const originalButtonText = submitButton.textContent;\n  submitButton.textContent = \"Сохранение...\";\n\n  postNewCard(newTitle, newUrl)\n    .then((result) => {\n      const cardElement = createCard(\n        result,\n        profileID,\n        handleDeleteButtonClick,\n        handleLikeButton,\n        openImage\n      );\n      placesList.prepend(cardElement);\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n    .finally(() => {\n      submitButton.textContent = originalButtonText;\n    });\n}\n\n// функция обработки нажатия лайка\nconst handleLikeButton = (cardId, button, likes) => {\n  if (button.classList.contains(\"card__like-button_is-active\")) {\n    removeLike(cardId).then((result) => {\n      likes.textContent = result.likes.length;\n      button.classList.toggle(\"card__like-button_is-active\");\n    });\n  } else {\n    addNewLike(cardId)\n      .then((result) => {\n        likes.textContent = result.likes.length;\n        button.classList.toggle(\"card__like-button_is-active\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n};\n\n// функция обработки клика по корзине\nconst handleDeleteButtonClick = (cardID, cardElement) => {\n  deleteCard(cardID)\n    .then(() => {\n      cardElement.remove();\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\n// функция автоматического заполнения формы\nfunction fillProfileForm() {\n  nameInput.value = profileTitle.textContent;\n  jobInput.value = profileDescription.textContent;\n}\n\n// функция открытия картинки\nfunction openImage(evt) {\n  popUpImage.src = evt.target.src;\n  popUpTitle.textContent = evt.target.alt;\n  popUpImage.alt = evt.target.alt;\n\n  openModal(imagePopUP);\n}\n\n// функция обработки клика по кнопке редактирования аватара\nfunction handleEditAvatarClick() {\n  openModal(editAvatarPopup);\n  clearValidation(editAvatarPopup, validationConfig);\n}\n\n// функция обработки клика по кнопке редактирования профиля\nfunction handleEditButtonClick() {\n  openModal(editPopUP);\n  clearValidation(editPopUP, validationConfig);\n  fillProfileForm();\n}\n\n// функция обработки клика по кнопке добавления новой карточки\nfunction handleAddButtonClick() {\n  openModal(newCardPopUP);\n  clearValidation(newCardPopUP, validationConfig);\n}\n\n// функция загрузки карточек с сервера\ngetCardsFromServer()\n  .then((result) => {\n    const cardPromises = result.map((cardData) => {\n      return new Promise((resolve) => {\n        const cardElement = createCard(\n          cardData,\n          profileID,\n          handleDeleteButtonClick,\n          handleLikeButton,\n          openImage\n        );\n        resolve(cardElement);\n      });\n    });\n\n    return Promise.all(cardPromises);\n  })\n  .then((cardElements) => {\n    cardElements.forEach((cardElement) => {\n      placesList.append(cardElement);\n    });\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n\n// функция проверки формы на ошибки\nenableValidation(validationConfig);\n\n// открытие поп-апов редактирования профиля и добавления новой карты по клику\neditButton.addEventListener(\"click\", handleEditButtonClick);\naddButton.addEventListener(\"click\", handleAddButtonClick);\neditAvatarButton.addEventListener(\"click\", handleEditAvatarClick);\n\n// обработчик формы добавления новой карточки\nnewCardForm.addEventListener(\"submit\", handleNewCardSubmit);\n\n// обработчик формы сохранения данных профиля\neditProfileForm.addEventListener(\"submit\", handleProfileFormSubmit);\n\n// обработчик формы сохранения нового аватара\neditAvatarForm.addEventListener(\"submit\", handleAvatarFormSubmit);\n","// базовая конфигурация запроса\nexport const config = {\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-21\",\n  headers: {\n    authorization: \"d427264f-2558-45b4-8c1b-5399802dd2a6\",\n    \"Content-Type\": \"application/json\",\n  },\n};\n\n// запрос данных пользователя\nconst getProfileData = () => {\n  return fetch(`${config.baseUrl}/users/me`, {\n    headers: config.headers,\n  }).then((res) => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  });\n};\n\n// запрос карточек\nconst getCardsFromServer = () => {\n  return fetch(`${config.baseUrl}/cards`, {\n    headers: config.headers,\n  }).then((res) => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  });\n};\n\n// обновление данных пользователя\nconst patchProfile = (name, about) => {\n  return fetch(`${config.baseUrl}/users/me`, {\n    method: \"PATCH\",\n    headers: config.headers,\n    body: JSON.stringify({\n      name: name,\n      about: about,\n    }),\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\n// обновление аватара пользователя\nconst changeAvatar = (link) => {\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\n    method: \"PATCH\",\n    headers: config.headers,\n    body: JSON.stringify({\n      avatar: link,\n    }),\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\n// добавление новой карточки\nconst postNewCard = (name, link) => {\n  return fetch(`${config.baseUrl}/cards`, {\n    method: \"POST\",\n    headers: config.headers,\n    body: JSON.stringify({\n      name: name,\n      link: link,\n    }),\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\n// удаление карточки\nconst deleteCard = (cardID) => {\n  return fetch(`${config.baseUrl}/cards/${cardID}`, {\n    method: \"DELETE\",\n    headers: config.headers,\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\n// добавление лайка\nconst addNewLike = (cardID) => {\n  return fetch(`${config.baseUrl}/cards/likes/${cardID}`, {\n    method: \"PUT\",\n    headers: config.headers,\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\n// снятие лайка\nconst removeLike = (cardID) => {\n  return fetch(`${config.baseUrl}/cards/likes/${cardID}`, {\n    method: \"DELETE\",\n    headers: config.headers,\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\nexport {\n  getProfileData,\n  getCardsFromServer,\n  patchProfile,\n  postNewCard,\n  deleteCard,\n  addNewLike,\n  removeLike,\n  changeAvatar,\n};\n"],"names":["createCard","cardData","userID","handleDeleteButtonClick","handleLikeButton","openImage","cardElement","document","querySelector","content","cloneNode","cardImage","cardTitle","cardLikes","src","link","alt","name","textContent","likes","length","cardID","_id","deleteButton","addEventListener","owner","remove","likeButton","handlePopupClick","evt","target","classList","contains","activePopup","closeModal","closePopupEsc","key","openModal","item","add","removeEventListener","profileID","hideInputError","formElement","inputElement","validationConfig","errorElement","concat","id","inputErrorClass","errorClass","toggleButtonState","inputList","buttonElement","some","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","clearValidation","profileForm","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","value","config","baseUrl","headers","authorization","profileImage","placesList","editPopUP","newCardPopUP","imagePopUP","editAvatarPopup","editButton","addButton","editAvatarButton","editProfileForm","nameInput","jobInput","profileTitle","profileDescription","newCardForm","newCardTitle","newCardUrl","popUpImage","popUpTitle","editAvatarForm","editAvatarUrl","formSelector","fetch","then","res","ok","json","Promise","reject","status","result","style","backgroundImage","avatar","about","catch","err","console","log","cardId","button","method","toggle","addNewLike","deleteCard","cardPromises","map","resolve","all","cardElements","append","preventDefault","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","checkInputValidity","setEventListeners","enableValidation","newTitle","newUrl","submitButton","originalButtonText","body","JSON","stringify","prepend","finally","handleProfileFormSubmit","newAvatar","url"],"sourceRoot":""}